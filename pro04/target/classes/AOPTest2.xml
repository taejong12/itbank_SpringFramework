<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<!-- 
		context:component-scan : base-package 에 있는 모든 객체를 자동 생성
		@Component 붙은 클래스 자동으로 스프링 빈 등록 
	-->
	<context:component-scan base-package="com.test.pro04" />
	
	<!-- 
		Advice 역할을 하는 클래스(AOPAdvice)를 빈으로 등록
	 -->
	<bean id="aopAdvice" class="com.test.pro04.ex02.AOPAdvice" />
	
	<!-- 
		<aop:config>: AOP 설정 태그 -> AOP 설정 시작 
	-->
	<aop:config>
	
		<!-- 
			<aop:aspect>: 실제 Advice 구현 클래스와 target 지정하는 태그
			ref="aopAdvice" -> AOPAdvice 클래스의 메서드들이 Advice 역할을 한다고 지정
		-->
		<aop:aspect ref="aopAdvice">
		
			<!-- 
				<aop:pointcut>: 어떤 메서드들이 AOP의 대상(Target)이 될지 지정하는 부분
				expression 속성: execution 문법으로 대상 메서드 선택
				id = "aopAdvicePoincut" 로 식별자 부여
				대상 메서드가 있다면, 프록시 객체를 생성해서 빈으로 주입
				
				★ execution(public void com.test.pro04.ex02.*.*(..)) 설명 ★
				- public: 접근 제한자가 public인 메서드
				- void: 반환 타입이 void인 메서드
				- com.test.pro04.ex02.*: 패키지 내 모든 클래스 대상
				- *: 클래스 내 모든 메서드
				- (..): 매개변수 상관없이 모두
			 -->
			<aop:pointcut expression="execution(public void com.test.pro04.ex02.*.*(..))" id="aopAdvicePointcut"/>
			
			<!--
				<aop:before> : 메서드 실행 전 AOP 실행 태그
				method : Advice 의 메서드 지정
				pointcut-ref : 참조하는 pointcut
			 -->
			<aop:before method="aopMethodBefore" pointcut-ref="aopAdvicePointcut" />
			
			<!--
				 <aop:after>: 대상 메서드 실행 후에 aopMethodAfter() 실행
			 -->
			<aop:after method="aopMethodAfter" pointcut-ref="aopAdvicePointcut" />
			
			<!-- 
				<aop:around>: 대상 메서드 실행 전후로 aopMethodAround() 실행
				- 메서드 실행을 가로채고 직접 실행할지 말지 결정 가능
			 -->
			<aop:around method="aopMethodAround" pointcut-ref="aopAdvicePointcut" />
			
			<!-- 이름에 'n'이 들어가는 메서드들만 적용되는 포인트컷 	-->
			<aop:pointcut expression="execution(* com.test.pro04.ex02.*.*n*(..))" id="aopAdvicePointcut2" />
			
			<!-- 
				<aop:after-returning>: 대상 메서드가 정상적으로 종료된 후 실행 
					- aopMethodReturn() 실행
					- 대상: 'n'이 포함된 메서드만				
			-->
			<aop:after-returning method="aopMethodReturn" pointcut-ref="aopAdvicePointcut2"/>
		</aop:aspect>
	</aop:config>
</beans>


